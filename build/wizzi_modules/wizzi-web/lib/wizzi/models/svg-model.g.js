/*
    artifact generator: C:\my\wizzi\stfnbssl\wizzi\packages\wizzi-core\dist\node_modules\wizzi-legacy-v5\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\stfnbssl\wizzi\packages\wizzi-core\dist\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Tue, 09 Feb 2021 20:43:27 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
/**
     Schema wide declarations
*/
var styles = [
    {
        name: 'alignmentBaseline', 
        tag: 'alignment-baseline'
    }, 
    {
        name: 'baselineShift', 
        tag: 'baseline-shift'
    }, 
    {
        name: 'clip', 
        tag: 'clip'
    }, 
    {
        name: 'clipPath', 
        tag: 'clip-path'
    }, 
    {
        name: 'clipRule', 
        tag: 'clip-rule'
    }, 
    {
        name: 'color', 
        tag: 'color'
    }, 
    {
        name: 'colorInterpolation', 
        tag: 'color-interpolation'
    }, 
    {
        name: 'colorInterpolationFilters', 
        tag: 'color-interpolation-filters'
    }, 
    {
        name: 'colorProfile', 
        tag: 'color-profile'
    }, 
    {
        name: 'colorRendering', 
        tag: 'color-rendering'
    }, 
    {
        name: 'cursor', 
        tag: 'cursor'
    }, 
    {
        name: 'direction', 
        tag: 'direction'
    }, 
    {
        name: 'display', 
        tag: 'display'
    }, 
    {
        name: 'dominantBaseline', 
        tag: 'dominant-baseline'
    }, 
    {
        name: 'enableBackground', 
        tag: 'enable-background'
    }, 
    {
        name: '/*fill', 
        tag: '/*fill'
    }, 
    {
        name: '*/fillOpacity', 
        tag: '*/fill-opacity'
    }, 
    {
        name: 'fillRule', 
        tag: 'fill-rule'
    }, 
    {
        name: 'filter', 
        tag: 'filter'
    }, 
    {
        name: 'floodColor', 
        tag: 'flood-color'
    }, 
    {
        name: 'floodOpacity', 
        tag: 'flood-opacity'
    }, 
    {
        name: 'fontFamily', 
        tag: 'font-family'
    }, 
    {
        name: 'fontSize', 
        tag: 'font-size'
    }, 
    {
        name: 'fontSizeAdjust', 
        tag: 'font-size-adjust'
    }, 
    {
        name: 'fontStretch', 
        tag: 'font-stretch'
    }, 
    {
        name: 'fontStyle', 
        tag: 'font-style'
    }, 
    {
        name: 'fontVariant', 
        tag: 'font-variant'
    }, 
    {
        name: 'fontWeight', 
        tag: 'font-weight'
    }, 
    {
        name: 'glyphOrientationHorizontal', 
        tag: 'glyph-orientation-horizontal'
    }, 
    {
        name: 'glyphOrientationVertical', 
        tag: 'glyph-orientation-vertical'
    }, 
    {
        name: 'imageRendering', 
        tag: 'image-rendering'
    }, 
    {
        name: 'kerning', 
        tag: 'kerning'
    }, 
    {
        name: 'letterSpacing', 
        tag: 'letter-spacing'
    }, 
    {
        name: 'lightingColor', 
        tag: 'lighting-color'
    }, 
    {
        name: 'markerEnd', 
        tag: 'marker-end'
    }, 
    {
        name: 'markerMid', 
        tag: 'marker-mid'
    }, 
    {
        name: 'markerStart', 
        tag: 'marker-start'
    }, 
    {
        name: 'mask', 
        tag: 'mask'
    }, 
    {
        name: '/*opacity', 
        tag: '/*opacity'
    }, 
    {
        name: '*/overflow', 
        tag: '*/overflow'
    }, 
    {
        name: 'pointerEvents', 
        tag: 'pointer-events'
    }, 
    {
        name: 'shapeRendering', 
        tag: 'shape-rendering'
    }, 
    {
        name: 'stopColor', 
        tag: 'stop-color'
    }, 
    {
        name: 'stopOpacity', 
        tag: 'stop-opacity'
    }, 
    {
        name: '/*stroke', 
        tag: '/*stroke'
    }, 
    {
        name: '*/strokeDasharray', 
        tag: '*/stroke-dasharray'
    }, 
    {
        name: 'strokeDashoffset', 
        tag: 'stroke-dashoffset'
    }, 
    {
        name: 'strokeLinecap', 
        tag: 'stroke-linecap'
    }, 
    {
        name: 'strokeLinejoin', 
        tag: 'stroke-linejoin'
    }, 
    {
        name: 'strokeMiterlimit', 
        tag: 'stroke-miterlimit'
    }, 
    {
        name: 'strokeOpacity', 
        tag: 'stroke-opacity'
    }, 
    {
        name: 'strokeWidth', 
        tag: 'stroke-width'
    }, 
    {
        name: 'textAnchor', 
        tag: 'text-anchor'
    }, 
    {
        name: 'textDecoration', 
        tag: 'text-decoration'
    }, 
    {
        name: 'textRendering', 
        tag: 'text-rendering'
    }, 
    {
        name: 'unicodeBidi', 
        tag: 'unicode-bidi'
    }, 
    {
        name: 'visibility', 
        tag: 'visibility'
    }, 
    {
        name: 'wordSpacing', 
        tag: 'word-spacing'
    }, 
    {
        name: 'writingMode', 
        tag: 'writing-mode'
    }
];
var _md = module.exports = {};
var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var svgBase = (function () {
    function svgBase(name, sourceLineInfo) {
        _classCallCheck(this, svgBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    svgBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    svgBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    svgBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
            }, true);
    }
    svgBase.prototype.wzVerify = function() {
    }
    svgBase.prototype.wzInitialize = function() {
    }
    svgBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    svgBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    svgBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    svgBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    svgBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    svgBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    svgBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    svgBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    svgBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    svgBase.prototype.error = function(message, node) {
        throw new _md.svgModelException(message, node, this);
    }
    svgBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    svgBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach((item) => {
                children.push(item.toJson());
            });
            result.wzChildren = children;
        }
    }
    return svgBase;
})();

_md.svgBase = svgBase;
// element comment
var comment = (function (svgBase) {
    _inherits(comment, svgBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.svgBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.svgBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach((item) => {
            items.push(item.toJson());
        });
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        return false;
    }
    comment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    comment.prototype.wzVerify = function(ctx) {
        this.comments.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.svgBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        this.comments.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.svgBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(svgBase);

_md.comment = comment;
/**
    element item
     attributes common to all svg items
*/
var item = (function (svgBase) {
    _inherits(item, svgBase);
    function item(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(item.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, item);
        this.wzElement = "item";
        /**
             This attribute lets specify the total length for the path, in user units.
             Value type: <number> ; Default value: none; Animatable: yes
        */
        // relation comment
        this.comments = [];
        // relation attribute
        this.attributes = [];
        // relation item
        this.items = [];
    }
    item.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    item.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.addAttribute = function(name, sourceLineInfo) {
        var retval = new _md.attribute(name, sourceLineInfo);
        retval.wzParent = this;
        this.attributes.push(retval);
        return retval;
    }
    item.prototype.getAttribute = function(name) {
        var found = null;
        this.attributes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.addItem = function(name, sourceLineInfo) {
        var retval = new _md.item(name, sourceLineInfo);
        retval.wzParent = this;
        this.items.push(retval);
        return retval;
    }
    item.prototype.getItem = function(name) {
        var found = null;
        this.items.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    item.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    item.prototype.toJsonProperties = function(result) {
        _md.svgBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.id)) {
            result["id"] = this.id;
        }
        if (!isEmpty(this.href)) {
            result["href"] = this.href;
        }
        if (!isEmpty(this.rotate)) {
            result["rotate"] = this.rotate;
        }
        if (!isEmpty(this.class)) {
            result["class"] = this.class;
        }
        if (!isEmpty(this.dataName)) {
            result["dataName"] = this.dataName;
        }
        if (!isEmpty(this.transform)) {
            result["transform"] = this.transform;
        }
        if (!isEmpty(this.xmlns)) {
            result["xmlns"] = this.xmlns;
        }
        if (!isEmpty(this.xmlns__)) {
            result["xmlns__"] = this.xmlns__;
        }
        if (!isEmpty(this.xmlBase)) {
            result["xmlBase"] = this.xmlBase;
        }
        if (!isEmpty(this.xmlLang)) {
            result["xmlLang"] = this.xmlLang;
        }
        if (!isEmpty(this.xmlSpace)) {
            result["xmlSpace"] = this.xmlSpace;
        }
        if (!isEmpty(this.pathLength)) {
            result["pathLength"] = this.pathLength;
        }
        if (!isEmpty(this.fill)) {
            result["fill"] = this.fill;
        }
        if (!isEmpty(this.stroke)) {
            result["stroke"] = this.stroke;
        }
        if (!isEmpty(this.opacity)) {
            result["opacity"] = this.opacity;
        }
        if (!isEmpty(this.alignmentBaseline)) {
            result["alignmentBaseline"] = this.alignmentBaseline;
        }
        if (!isEmpty(this.baselineShift)) {
            result["baselineShift"] = this.baselineShift;
        }
        if (!isEmpty(this.clip)) {
            result["clip"] = this.clip;
        }
        if (!isEmpty(this.clipPath)) {
            result["clipPath"] = this.clipPath;
        }
        if (!isEmpty(this.clipRule)) {
            result["clipRule"] = this.clipRule;
        }
        if (!isEmpty(this.color)) {
            result["color"] = this.color;
        }
        if (!isEmpty(this.colorInterpolation)) {
            result["colorInterpolation"] = this.colorInterpolation;
        }
        if (!isEmpty(this.colorInterpolationFilters)) {
            result["colorInterpolationFilters"] = this.colorInterpolationFilters;
        }
        if (!isEmpty(this.colorProfile)) {
            result["colorProfile"] = this.colorProfile;
        }
        if (!isEmpty(this.colorRendering)) {
            result["colorRendering"] = this.colorRendering;
        }
        if (!isEmpty(this.cursor)) {
            result["cursor"] = this.cursor;
        }
        if (!isEmpty(this.direction)) {
            result["direction"] = this.direction;
        }
        if (!isEmpty(this.display)) {
            result["display"] = this.display;
        }
        if (!isEmpty(this.dominantBaseline)) {
            result["dominantBaseline"] = this.dominantBaseline;
        }
        if (!isEmpty(this.enableBackground)) {
            result["enableBackground"] = this.enableBackground;
        }
        if (!isEmpty(this.__fill)) {
            result["__fill"] = this.__fill;
        }
        if (!isEmpty(this.__fillOpacity)) {
            result["__fillOpacity"] = this.__fillOpacity;
        }
        if (!isEmpty(this.fillRule)) {
            result["fillRule"] = this.fillRule;
        }
        if (!isEmpty(this.filter)) {
            result["filter"] = this.filter;
        }
        if (!isEmpty(this.floodColor)) {
            result["floodColor"] = this.floodColor;
        }
        if (!isEmpty(this.floodOpacity)) {
            result["floodOpacity"] = this.floodOpacity;
        }
        if (!isEmpty(this.fontFamily)) {
            result["fontFamily"] = this.fontFamily;
        }
        if (!isEmpty(this.fontSize)) {
            result["fontSize"] = this.fontSize;
        }
        if (!isEmpty(this.fontSizeAdjust)) {
            result["fontSizeAdjust"] = this.fontSizeAdjust;
        }
        if (!isEmpty(this.fontStretch)) {
            result["fontStretch"] = this.fontStretch;
        }
        if (!isEmpty(this.fontStyle)) {
            result["fontStyle"] = this.fontStyle;
        }
        if (!isEmpty(this.fontVariant)) {
            result["fontVariant"] = this.fontVariant;
        }
        if (!isEmpty(this.fontWeight)) {
            result["fontWeight"] = this.fontWeight;
        }
        if (!isEmpty(this.glyphOrientationHorizontal)) {
            result["glyphOrientationHorizontal"] = this.glyphOrientationHorizontal;
        }
        if (!isEmpty(this.glyphOrientationVertical)) {
            result["glyphOrientationVertical"] = this.glyphOrientationVertical;
        }
        if (!isEmpty(this.imageRendering)) {
            result["imageRendering"] = this.imageRendering;
        }
        if (!isEmpty(this.kerning)) {
            result["kerning"] = this.kerning;
        }
        if (!isEmpty(this.letterSpacing)) {
            result["letterSpacing"] = this.letterSpacing;
        }
        if (!isEmpty(this.lightingColor)) {
            result["lightingColor"] = this.lightingColor;
        }
        if (!isEmpty(this.markerEnd)) {
            result["markerEnd"] = this.markerEnd;
        }
        if (!isEmpty(this.markerMid)) {
            result["markerMid"] = this.markerMid;
        }
        if (!isEmpty(this.markerStart)) {
            result["markerStart"] = this.markerStart;
        }
        if (!isEmpty(this.mask)) {
            result["mask"] = this.mask;
        }
        if (!isEmpty(this.__opacity)) {
            result["__opacity"] = this.__opacity;
        }
        if (!isEmpty(this.__overflow)) {
            result["__overflow"] = this.__overflow;
        }
        if (!isEmpty(this.pointerEvents)) {
            result["pointerEvents"] = this.pointerEvents;
        }
        if (!isEmpty(this.shapeRendering)) {
            result["shapeRendering"] = this.shapeRendering;
        }
        if (!isEmpty(this.stopColor)) {
            result["stopColor"] = this.stopColor;
        }
        if (!isEmpty(this.stopOpacity)) {
            result["stopOpacity"] = this.stopOpacity;
        }
        if (!isEmpty(this.__stroke)) {
            result["__stroke"] = this.__stroke;
        }
        if (!isEmpty(this.__strokeDasharray)) {
            result["__strokeDasharray"] = this.__strokeDasharray;
        }
        if (!isEmpty(this.strokeDashoffset)) {
            result["strokeDashoffset"] = this.strokeDashoffset;
        }
        if (!isEmpty(this.strokeLinecap)) {
            result["strokeLinecap"] = this.strokeLinecap;
        }
        if (!isEmpty(this.strokeLinejoin)) {
            result["strokeLinejoin"] = this.strokeLinejoin;
        }
        if (!isEmpty(this.strokeMiterlimit)) {
            result["strokeMiterlimit"] = this.strokeMiterlimit;
        }
        if (!isEmpty(this.strokeOpacity)) {
            result["strokeOpacity"] = this.strokeOpacity;
        }
        if (!isEmpty(this.strokeWidth)) {
            result["strokeWidth"] = this.strokeWidth;
        }
        if (!isEmpty(this.textAnchor)) {
            result["textAnchor"] = this.textAnchor;
        }
        if (!isEmpty(this.textDecoration)) {
            result["textDecoration"] = this.textDecoration;
        }
        if (!isEmpty(this.textRendering)) {
            result["textRendering"] = this.textRendering;
        }
        if (!isEmpty(this.unicodeBidi)) {
            result["unicodeBidi"] = this.unicodeBidi;
        }
        if (!isEmpty(this.visibility)) {
            result["visibility"] = this.visibility;
        }
        if (!isEmpty(this.wordSpacing)) {
            result["wordSpacing"] = this.wordSpacing;
        }
        if (!isEmpty(this.writingMode)) {
            result["writingMode"] = this.writingMode;
        }
    }
    item.prototype.toJsonChildren = function(result) {
        _md.svgBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach((item) => {
            items.push(item.toJson());
        });
        result['comments'] = items;
        items = [];
        this.attributes.forEach((item) => {
            items.push(item.toJson());
        });
        result['attributes'] = items;
        items = [];
        this.items.forEach((item) => {
            items.push(item.toJson());
        });
        result['items'] = items;
    }
    item.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.attribute, this.attributes);
        }
        if (name === 'a') {
            return this.wzLoadToChildColl(child, _md.a, this.items);
        }
        if (name === 'g') {
            return this.wzLoadToChildColl(child, _md.g, this.items);
        }
        if (name === 'id') {
            this.id = child.v; return true;
        }
        if (name === 'svg') {
            return this.wzLoadToChildColl(child, _md.svg, this.items);
        }
        else if (name === 'set') {
            return this.wzLoadToChildColl(child, _md.set, this.items);
        }
        if (name === 'use') {
            return this.wzLoadToChildColl(child, _md.use, this.items);
        }
        if (name === 'clip') {
            this.clip = child.v; return true;
        }
        if (name === 'defs') {
            return this.wzLoadToChildColl(child, _md.defs, this.items);
        }
        else if (name === 'desc') {
            return this.wzLoadToChildColl(child, _md.desc, this.items);
        }
        if (name === 'fill') {
            this.fill = child.v; return true;
        }
        else if (name === 'font') {
            return this.wzLoadToChildColl(child, _md.font, this.items);
        }
        if (name === 'href') {
            this.href = child.v; return true;
        }
        if (name === 'item') {
            return this.wzLoadToChildColl(child, _md.item, this.items);
        }
        if (name === 'line') {
            return this.wzLoadToChildColl(child, _md.line, this.items);
        }
        if (name === 'mask') {
            this.mask = child.v; return true;
        }
        else if (name === 'mask') {
            return this.wzLoadToChildColl(child, _md.mask, this.items);
        }
        if (name === 'path') {
            return this.wzLoadToChildColl(child, _md.path, this.items);
        }
        if (name === 'rect') {
            return this.wzLoadToChildColl(child, _md.rect, this.items);
        }
        if (name === 'stop') {
            return this.wzLoadToChildColl(child, _md.stop, this.items);
        }
        if (name === 'text') {
            return this.wzLoadToChildColl(child, _md.text, this.items);
        }
        else if (name === 'tref') {
            return this.wzLoadToChildColl(child, _md.tref, this.items);
        }
        if (name === 'view') {
            return this.wzLoadToChildColl(child, _md.view, this.items);
        }
        if (name === 'class') {
            this.class = child.v; return true;
        }
        else if (name === 'color') {
            this.color = child.v; return true;
        }
        if (name === 'glyph') {
            return this.wzLoadToChildColl(child, _md.glyph, this.items);
        }
        if (name === 'hkern') {
            return this.wzLoadToChildColl(child, _md.hkern, this.items);
        }
        if (name === 'image') {
            return this.wzLoadToChildColl(child, _md.image, this.items);
        }
        if (name === 'mpath') {
            return this.wzLoadToChildColl(child, _md.mpath, this.items);
        }
        if (name === 'style') {
            return this.wzLoadToChildColl(child, _md.style, this.items);
        }
        if (name === 'tspan') {
            return this.wzLoadToChildColl(child, _md.tspan, this.items);
        }
        else if (name === 'title') {
            return this.wzLoadToChildColl(child, _md.title, this.items);
        }
        if (name === 'vkern') {
            return this.wzLoadToChildColl(child, _md.vkern, this.items);
        }
        if (name === 'xmlns') {
            this.xmlns = child.v; return true;
        }
        if (name === '/*fill') {
            this.__fill = child.v; return true;
        }
        if (name === 'cursor') {
            this.cursor = child.v; return true;
        }
        else if (name === 'circle') {
            return this.wzLoadToChildColl(child, _md.circle, this.items);
        }
        else if (name === 'cursor') {
            return this.wzLoadToChildColl(child, _md.cursor, this.items);
        }
        if (name === 'filter') {
            this.filter = child.v; return true;
        }
        else if (name === 'fetile') {
            return this.wzLoadToChildColl(child, _md.feTile, this.items);
        }
        else if (name === 'filter') {
            return this.wzLoadToChildColl(child, _md.filter, this.items);
        }
        if (name === 'marker') {
            return this.wzLoadToChildColl(child, _md.marker, this.items);
        }
        if (name === 'rotate') {
            this.rotate = child.v; return true;
        }
        if (name === 'stroke') {
            this.stroke = child.v; return true;
        }
        else if (name === 'script') {
            return this.wzLoadToChildColl(child, _md.script, this.items);
        }
        else if (name === 'switch') {
            return this.wzLoadToChildColl(child, _md.xswitch, this.items);
        }
        else if (name === 'symbol') {
            return this.wzLoadToChildColl(child, _md.symbol, this.items);
        }
        if (name === 'animate') {
            return this.wzLoadToChildColl(child, _md.animate, this.items);
        }
        if (name === 'display') {
            this.display = child.v; return true;
        }
        if (name === 'ellipse') {
            return this.wzLoadToChildColl(child, _md.ellipse, this.items);
        }
        if (name === 'feblend') {
            return this.wzLoadToChildColl(child, _md.feBlend, this.items);
        }
        else if (name === 'feflood') {
            return this.wzLoadToChildColl(child, _md.feFlood, this.items);
        }
        else if (name === 'fefunca') {
            return this.wzLoadToChildColl(child, _md.feFuncA, this.items);
        }
        else if (name === 'fefuncb') {
            return this.wzLoadToChildColl(child, _md.feFuncB, this.items);
        }
        else if (name === 'fefuncg') {
            return this.wzLoadToChildColl(child, _md.feFuncG, this.items);
        }
        else if (name === 'fefuncr') {
            return this.wzLoadToChildColl(child, _md.feFuncR, this.items);
        }
        else if (name === 'feimage') {
            return this.wzLoadToChildColl(child, _md.feImage, this.items);
        }
        else if (name === 'femerge') {
            return this.wzLoadToChildColl(child, _md.feMerge, this.items);
        }
        if (name === 'kerning') {
            this.kerning = child.v; return true;
        }
        if (name === 'opacity') {
            this.opacity = child.v; return true;
        }
        if (name === 'polygon') {
            return this.wzLoadToChildColl(child, _md.polygon, this.items);
        }
        else if (name === 'pattern') {
            return this.wzLoadToChildColl(child, _md.pattern, this.items);
        }
        if (name === '/*stroke') {
            this.__stroke = child.v; return true;
        }
        if (name === 'altglyph') {
            return this.wzLoadToChildColl(child, _md.altGlyph, this.items);
        }
        if (name === 'clippath') {
            return this.wzLoadToChildColl(child, _md.clipPath, this.items);
        }
        if (name === 'feoffset') {
            return this.wzLoadToChildColl(child, _md.feOffset, this.items);
        }
        else if (name === 'fontface') {
            return this.wzLoadToChildColl(child, _md.font_face, this.items);
        }
        if (name === 'glyphref') {
            return this.wzLoadToChildColl(child, _md.glyphRef, this.items);
        }
        if (name === 'metadata') {
            return this.wzLoadToChildColl(child, _md.metadata, this.items);
        }
        if (name === 'polyline') {
            return this.wzLoadToChildColl(child, _md.polyline, this.items);
        }
        if (name === 'textpath') {
            return this.wzLoadToChildColl(child, _md.textPath, this.items);
        }
        if (name === 'xml:base') {
            this.xmlBase = child.v; return true;
        }
        else if (name === 'xml:lang') {
            this.xmlLang = child.v; return true;
        }
        if (name === '/*opacity') {
            this.__opacity = child.v; return true;
        }
        if (name === 'clip-path') {
            this.clipPath = child.v; return true;
        }
        else if (name === 'clip_path') {
            this.clipPath = child.v; return true;
        }
        else if (name === 'clip-rule') {
            this.clipRule = child.v; return true;
        }
        else if (name === 'clip_rule') {
            this.clipRule = child.v; return true;
        }
        if (name === 'data-name') {
            this.dataName = child.v; return true;
        }
        else if (name === 'data_name') {
            this.dataName = child.v; return true;
        }
        else if (name === 'direction') {
            this.direction = child.v; return true;
        }
        if (name === 'fill-rule') {
            this.fillRule = child.v; return true;
        }
        else if (name === 'fill_rule') {
            this.fillRule = child.v; return true;
        }
        else if (name === 'font-size') {
            this.fontSize = child.v; return true;
        }
        else if (name === 'font_size') {
            this.fontSize = child.v; return true;
        }
        else if (name === 'font-face') {
            return this.wzLoadToChildColl(child, _md.font_face, this.items);
        }
        if (name === 'transform') {
            this.transform = child.v; return true;
        }
        if (name === 'xml:space') {
            this.xmlSpace = child.v; return true;
        }
        if (name === '*/overflow') {
            this.__overflow = child.v; return true;
        }
        if (name === 'font-style') {
            this.fontStyle = child.v; return true;
        }
        else if (name === 'font_style') {
            this.fontStyle = child.v; return true;
        }
        if (name === 'marker-end') {
            this.markerEnd = child.v; return true;
        }
        else if (name === 'marker_end') {
            this.markerEnd = child.v; return true;
        }
        else if (name === 'marker-mid') {
            this.markerMid = child.v; return true;
        }
        else if (name === 'marker_mid') {
            this.markerMid = child.v; return true;
        }
        if (name === 'stop-color') {
            this.stopColor = child.v; return true;
        }
        else if (name === 'stop_color') {
            this.stopColor = child.v; return true;
        }
        if (name === 'visibility') {
            this.visibility = child.v; return true;
        }
        if (name === 'altglyphdef') {
            return this.wzLoadToChildColl(child, _md.altGlyphDef, this.items);
        }
        if (name === 'flood-color') {
            this.floodColor = child.v; return true;
        }
        else if (name === 'flood_color') {
            this.floodColor = child.v; return true;
        }
        else if (name === 'font-family') {
            this.fontFamily = child.v; return true;
        }
        else if (name === 'font_family') {
            this.fontFamily = child.v; return true;
        }
        else if (name === 'font-weight') {
            this.fontWeight = child.v; return true;
        }
        else if (name === 'font_weight') {
            this.fontWeight = child.v; return true;
        }
        else if (name === 'fecomposite') {
            return this.wzLoadToChildColl(child, _md.feComposite, this.items);
        }
        else if (name === 'femergenode') {
            return this.wzLoadToChildColl(child, _md.feMergeNode, this.items);
        }
        else if (name === 'fespotlight') {
            return this.wzLoadToChildColl(child, _md.feSpotLight, this.items);
        }
        else if (name === 'fontfacesrc') {
            return this.wzLoadToChildColl(child, _md.font_face_src, this.items);
        }
        else if (name === 'fontfaceuri') {
            return this.wzLoadToChildColl(child, _md.font_face_uri, this.items);
        }
        if (name === 'path-length') {
            this.pathLength = child.v; return true;
        }
        else if (name === 'path_length') {
            this.pathLength = child.v; return true;
        }
        if (name === 'strokewidth') {
            return this.wzLoadToChildColl(child, _md.stroke_width, this.items);
        }
        if (name === 'text-anchor') {
            this.textAnchor = child.v; return true;
        }
        else if (name === 'text_anchor') {
            this.textAnchor = child.v; return true;
        }
        if (name === 'altglyphitem') {
            return this.wzLoadToChildColl(child, _md.altGlyphItem, this.items);
        }
        else if (name === 'animatecolor') {
            return this.wzLoadToChildColl(child, _md.animateColor, this.items);
        }
        if (name === 'colorprofile') {
            return this.wzLoadToChildColl(child, _md.color_profile, this.items);
        }
        if (name === 'font-stretch') {
            this.fontStretch = child.v; return true;
        }
        else if (name === 'font_stretch') {
            this.fontStretch = child.v; return true;
        }
        else if (name === 'font-variant') {
            this.fontVariant = child.v; return true;
        }
        else if (name === 'font_variant') {
            this.fontVariant = child.v; return true;
        }
        else if (name === 'femorphology') {
            return this.wzLoadToChildColl(child, _md.feMorphology, this.items);
        }
        else if (name === 'fepointlight') {
            return this.wzLoadToChildColl(child, _md.fePointLight, this.items);
        }
        else if (name === 'feturbulence') {
            return this.wzLoadToChildColl(child, _md.feTurbulence, this.items);
        }
        else if (name === 'fontfacename') {
            return this.wzLoadToChildColl(child, _md.font_face_name, this.items);
        }
        if (name === 'marker-start') {
            this.markerStart = child.v; return true;
        }
        else if (name === 'marker_start') {
            this.markerStart = child.v; return true;
        }
        else if (name === 'missingglyph') {
            return this.wzLoadToChildColl(child, _md.missing_glyph, this.items);
        }
        if (name === 'stop-opacity') {
            this.stopOpacity = child.v; return true;
        }
        else if (name === 'stop_opacity') {
            this.stopOpacity = child.v; return true;
        }
        else if (name === 'stroke-width') {
            this.strokeWidth = child.v; return true;
        }
        else if (name === 'stroke_width') {
            this.strokeWidth = child.v; return true;
        }
        else if (name === 'stroke-width') {
            return this.wzLoadToChildColl(child, _md.stroke_width, this.items);
        }
        if (name === 'unicode-bidi') {
            this.unicodeBidi = child.v; return true;
        }
        else if (name === 'unicode_bidi') {
            this.unicodeBidi = child.v; return true;
        }
        if (name === 'word-spacing') {
            this.wordSpacing = child.v; return true;
        }
        else if (name === 'word_spacing') {
            this.wordSpacing = child.v; return true;
        }
        else if (name === 'writing-mode') {
            this.writingMode = child.v; return true;
        }
        else if (name === 'writing_mode') {
            this.writingMode = child.v; return true;
        }
        if (name === 'animatemotion') {
            return this.wzLoadToChildColl(child, _md.animateMotion, this.items);
        }
        if (name === 'color-profile') {
            this.colorProfile = child.v; return true;
        }
        else if (name === 'color_profile') {
            this.colorProfile = child.v; return true;
        }
        else if (name === 'color-profile') {
            return this.wzLoadToChildColl(child, _md.color_profile, this.items);
        }
        if (name === 'flood-opacity') {
            this.floodOpacity = child.v; return true;
        }
        else if (name === 'flood_opacity') {
            this.floodOpacity = child.v; return true;
        }
        else if (name === 'fecolormatrix') {
            return this.wzLoadToChildColl(child, _md.feColorMatrix, this.items);
        }
        else if (name === 'font-face-src') {
            return this.wzLoadToChildColl(child, _md.font_face_src, this.items);
        }
        else if (name === 'font-face-uri') {
            return this.wzLoadToChildColl(child, _md.font_face_uri, this.items);
        }
        else if (name === 'foreignobject') {
            return this.wzLoadToChildColl(child, _md.foreignObject, this.items);
        }
        if (name === 'missing-glyph') {
            return this.wzLoadToChildColl(child, _md.missing_glyph, this.items);
        }
        if (name === '*/fill-opacity') {
            this.__fillOpacity = child.v; return true;
        }
        else if (name === '*/fill_opacity') {
            this.__fillOpacity = child.v; return true;
        }
        if (name === 'baseline-shift') {
            this.baselineShift = child.v; return true;
        }
        else if (name === 'baseline_shift') {
            this.baselineShift = child.v; return true;
        }
        if (name === 'fedistantlight') {
            return this.wzLoadToChildColl(child, _md.feDistantLight, this.items);
        }
        else if (name === 'fegaussianblur') {
            return this.wzLoadToChildColl(child, _md.feGaussianBlur, this.items);
        }
        else if (name === 'fontfaceformat') {
            return this.wzLoadToChildColl(child, _md.font_face_format, this.items);
        }
        else if (name === 'font-face-name') {
            return this.wzLoadToChildColl(child, _md.font_face_name, this.items);
        }
        if (name === 'letter-spacing') {
            this.letterSpacing = child.v; return true;
        }
        else if (name === 'letter_spacing') {
            this.letterSpacing = child.v; return true;
        }
        else if (name === 'lighting-color') {
            this.lightingColor = child.v; return true;
        }
        else if (name === 'lighting_color') {
            this.lightingColor = child.v; return true;
        }
        else if (name === 'lineargradient') {
            return this.wzLoadToChildColl(child, _md.linearGradient, this.items);
        }
        if (name === 'pointer-events') {
            this.pointerEvents = child.v; return true;
        }
        else if (name === 'pointer_events') {
            this.pointerEvents = child.v; return true;
        }
        if (name === 'radialgradient') {
            return this.wzLoadToChildColl(child, _md.radialGradient, this.items);
        }
        if (name === 'stroke-linecap') {
            this.strokeLinecap = child.v; return true;
        }
        else if (name === 'stroke_linecap') {
            this.strokeLinecap = child.v; return true;
        }
        else if (name === 'stroke-opacity') {
            this.strokeOpacity = child.v; return true;
        }
        else if (name === 'stroke_opacity') {
            this.strokeOpacity = child.v; return true;
        }
        if (name === 'text-rendering') {
            this.textRendering = child.v; return true;
        }
        else if (name === 'text_rendering') {
            this.textRendering = child.v; return true;
        }
        if (name === 'color-rendering') {
            this.colorRendering = child.v; return true;
        }
        else if (name === 'color_rendering') {
            this.colorRendering = child.v; return true;
        }
        if (name === 'image-rendering') {
            this.imageRendering = child.v; return true;
        }
        else if (name === 'image_rendering') {
            this.imageRendering = child.v; return true;
        }
        if (name === 'shape-rendering') {
            this.shapeRendering = child.v; return true;
        }
        else if (name === 'shape_rendering') {
            this.shapeRendering = child.v; return true;
        }
        else if (name === 'stroke-linejoin') {
            this.strokeLinejoin = child.v; return true;
        }
        else if (name === 'stroke_linejoin') {
            this.strokeLinejoin = child.v; return true;
        }
        if (name === 'text-decoration') {
            this.textDecoration = child.v; return true;
        }
        else if (name === 'text_decoration') {
            this.textDecoration = child.v; return true;
        }
        if (name === 'animatetransform') {
            return this.wzLoadToChildColl(child, _md.animateTransform, this.items);
        }
        if (name === 'font-size-adjust') {
            this.fontSizeAdjust = child.v; return true;
        }
        else if (name === 'font_size_adjust') {
            this.fontSizeAdjust = child.v; return true;
        }
        else if (name === 'feconvolvematrix') {
            return this.wzLoadToChildColl(child, _md.feConvolveMatrix, this.items);
        }
        else if (name === 'font-face-format') {
            return this.wzLoadToChildColl(child, _md.font_face_format, this.items);
        }
        if (name === 'dominant-baseline') {
            this.dominantBaseline = child.v; return true;
        }
        else if (name === 'dominant_baseline') {
            this.dominantBaseline = child.v; return true;
        }
        if (name === 'enable-background') {
            this.enableBackground = child.v; return true;
        }
        else if (name === 'enable_background') {
            this.enableBackground = child.v; return true;
        }
        if (name === 'fediffuselighting') {
            return this.wzLoadToChildColl(child, _md.feDiffuseLighting, this.items);
        }
        else if (name === 'fedisplacementmap') {
            return this.wzLoadToChildColl(child, _md.feDisplacementMap, this.items);
        }
        if (name === 'stroke-dashoffset') {
            this.strokeDashoffset = child.v; return true;
        }
        else if (name === 'stroke_dashoffset') {
            this.strokeDashoffset = child.v; return true;
        }
        else if (name === 'stroke-miterlimit') {
            this.strokeMiterlimit = child.v; return true;
        }
        else if (name === 'stroke_miterlimit') {
            this.strokeMiterlimit = child.v; return true;
        }
        if (name === '*/stroke-dasharray') {
            this.__strokeDasharray = child.v; return true;
        }
        else if (name === '*/stroke_dasharray') {
            this.__strokeDasharray = child.v; return true;
        }
        if (name === 'alignment-baseline') {
            this.alignmentBaseline = child.v; return true;
        }
        else if (name === 'alignment_baseline') {
            this.alignmentBaseline = child.v; return true;
        }
        if (name === 'fespecularlighting') {
            return this.wzLoadToChildColl(child, _md.feSpecularLighting, this.items);
        }
        if (name === 'color-interpolation') {
            this.colorInterpolation = child.v; return true;
        }
        else if (name === 'color_interpolation') {
            this.colorInterpolation = child.v; return true;
        }
        if (name === 'fecomponenttransfer') {
            return this.wzLoadToChildColl(child, _md.feComponentTransfer, this.items);
        }
        if (name === 'glyph-orientation-vertical') {
            this.glyphOrientationVertical = child.v; return true;
        }
        else if (name === 'glyph_orientation_vertical') {
            this.glyphOrientationVertical = child.v; return true;
        }
        if (name === 'color-interpolation-filters') {
            this.colorInterpolationFilters = child.v; return true;
        }
        else if (name === 'color_interpolation_filters') {
            this.colorInterpolationFilters = child.v; return true;
        }
        if (name === 'glyph-orientation-horizontal') {
            this.glyphOrientationHorizontal = child.v; return true;
        }
        else if (name === 'glyph_orientation_horizontal') {
            this.glyphOrientationHorizontal = child.v; return true;
        }
        if (name.substr(0, 6) == "xmlns:") {
            this[name] = child.v;
            return true;
        }
        return false;
    }
    item.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    item.prototype.wzVerify = function(ctx) {
        this.comments.forEach((item) => {
            item.wzVerify(ctx);
        });
        this.attributes.forEach((item) => {
            item.wzVerify(ctx);
        });
        this.items.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.svgBase.prototype.wzVerify.call(this, ctx);
    }
    item.prototype.wzInitialize = function(ctx) {
        this.comments.forEach((item) => {
            item.wzInitialize(ctx);
        });
        this.attributes.forEach((item) => {
            item.wzInitialize(ctx);
        });
        this.items.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.svgBase.prototype.wzInitialize.call(this, ctx);
    }
    item.prototype.getAttributes = function(attrs) {
        return extractAttributes(this, 'id;class;dataName;href;rotate;transform;xmlns;xmlBase;xmlLang;xmlSpace;pathLength;fill;stroke;opacity', attrs);
    }
    item.prototype.getStyleAttributes = function() {
        var ret = [];
        var i, i_items=styles, i_len=styles.length, style;
        for (i=0; i<i_len; i++) {
            style = styles[i];
            if (typeof(this[style.name]) !== 'undefined' && this[style.name] != null) {
                ret.push({
                    name: style.name, 
                    tag: style.tag, 
                    value: this[style.name]
                });
            }
        }
        return ret;
    }
    return item;
})(svgBase);

_md.item = item;
/**
    element attribute
     Used for Svg element attributes not declared in this schema.
     The wzName must contain a name-value pair separated by a blank (value is optional).
     Name is the attribute name and value, if not empty, is the attribute value.
*/
var attribute = (function (svgBase) {
    _inherits(attribute, svgBase);
    function attribute(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(attribute.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, attribute);
        this.wzElement = "attribute";
    }
    attribute.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    attribute.prototype.toJsonProperties = function(result) {
        _md.svgBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    attribute.prototype.toJsonChildren = function(result) {
        _md.svgBase.prototype.toJsonChildren.call(this, result);
    }
    return attribute;
})(svgBase);

_md.attribute = attribute;
// element rect
var rect = (function (item) {
    _inherits(rect, item);
    function rect(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rect.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rect);
        this.wzElement = "rect";
        /**
             This attribute determines the x coordinate of the rect.
             Value type: <length>|<percentage> ; Default value: 0; Animatable: yes
        */
        /**
             This attribute determines the y coordinate of the rect.
             Value type: <length>|<percentage> ; Default value: 0; Animatable: yes
        */
        /**
             This attribute determines the width of the rect.
             Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
        */
        /**
             This attribute determines the height of the rect.
             Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
        */
        /**
             This attribute determines the horizontal corner radius of the rect.
             Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
        */
        /**
             This attribute determines the vertical corner radius of the rect.
             Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
        */
    }
    rect.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    rect.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.x)) {
            result["x"] = this.x;
        }
        if (!isEmpty(this.y)) {
            result["y"] = this.y;
        }
        if (!isEmpty(this.width)) {
            result["width"] = this.width;
        }
        if (!isEmpty(this.height)) {
            result["height"] = this.height;
        }
        if (!isEmpty(this.rx)) {
            result["rx"] = this.rx;
        }
        if (!isEmpty(this.ry)) {
            result["ry"] = this.ry;
        }
    }
    rect.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    rect.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'x') {
            this.x = child.v; return true;
        }
        if (name === 'y') {
            this.y = child.v; return true;
        }
        if (name === 'rx') {
            this.rx = child.v; return true;
        }
        else if (name === 'ry') {
            this.ry = child.v; return true;
        }
        if (name === 'width') {
            this.width = child.v; return true;
        }
        if (name === 'height') {
            this.height = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    rect.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    rect.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'x;y;width;height;rx;ry', attrs);
    }
    return rect;
})(item);

_md.rect = rect;
// element svg
var svg = (function (rect) {
    _inherits(svg, rect);
    function svg(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(svg.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, svg);
        this.wzElement = "svg";
        /**
             This attribute defines the bound of the SVG viewport for the current SVG fragment.
             Value type: <list-of-numbers> ; Default value: none; Animatable: yes
        */
        /**
             This attribute defines how the svg fragment must be deformed if it is embedded in a container with a different aspect ratio.
             Value type: (none| xMinYMin| xMidYMin| xMaxYMin| xMinYMid| xMidYMid| xMaxYMid| xMinYMax| xMidYMax| xMaxYMax) (meet|slice)? ; Default value: xMidYMid meet; Animatable: yes
        */
    }
    svg.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    svg.prototype.toJsonProperties = function(result) {
        _md.rect.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.viewBox)) {
            result["viewBox"] = this.viewBox;
        }
        if (!isEmpty(this.preserveAspectRatio)) {
            result["preserveAspectRatio"] = this.preserveAspectRatio;
        }
        if (!isEmpty(this.version)) {
            result["version"] = this.version;
        }
        if (!isEmpty(this.alt)) {
            result["alt"] = this.alt;
        }
    }
    svg.prototype.toJsonChildren = function(result) {
        _md.rect.prototype.toJsonChildren.call(this, result);
    }
    svg.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'alt') {
            this.alt = child.v; return true;
        }
        if (name === 'viewbox') {
            this.viewBox = child.v; return true;
        }
        else if (name === 'version') {
            this.version = child.v; return true;
        }
        if (name === 'view-box') {
            this.viewBox = child.v; return true;
        }
        else if (name === 'view_box') {
            this.viewBox = child.v; return true;
        }
        if (name === 'preserve-aspect-ratio') {
            this.preserveAspectRatio = child.v; return true;
        }
        else if (name === 'preserve_aspect_ratio') {
            this.preserveAspectRatio = child.v; return true;
        }
        ok = _md.rect.prototype.loadChild.call(this, child);
        return ok;
    }
    svg.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    svg.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'width;height;viewBox;preserveAspectRatio;version', attrs);
    }
    return svg;
})(rect);

_md.svg = svg;
// element line
var line = (function (item) {
    _inherits(line, item);
    function line(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(line.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, line);
        this.wzElement = "line";
    }
    line.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    line.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.x1)) {
            result["x1"] = this.x1;
        }
        if (!isEmpty(this.y1)) {
            result["y1"] = this.y1;
        }
        if (!isEmpty(this.x2)) {
            result["x2"] = this.x2;
        }
        if (!isEmpty(this.y2)) {
            result["y2"] = this.y2;
        }
    }
    line.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    line.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'x1') {
            this.x1 = child.v; return true;
        }
        else if (name === 'x2') {
            this.x2 = child.v; return true;
        }
        if (name === 'y1') {
            this.y1 = child.v; return true;
        }
        else if (name === 'y2') {
            this.y2 = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    line.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    line.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'x1;y1;x2;y2;', attrs);
    }
    return line;
})(item);

_md.line = line;
// element polyline
var polyline = (function (item) {
    _inherits(polyline, item);
    function polyline(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(polyline.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, polyline);
        this.wzElement = "polyline";
    }
    polyline.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    polyline.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.points)) {
            result["points"] = this.points;
        }
    }
    polyline.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    polyline.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'points') {
            this.points = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    polyline.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    polyline.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'points', attrs);
    }
    return polyline;
})(item);

_md.polyline = polyline;
// element polygon
var polygon = (function (item) {
    _inherits(polygon, item);
    function polygon(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(polygon.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, polygon);
        this.wzElement = "polygon";
    }
    polygon.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    polygon.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.points)) {
            result["points"] = this.points;
        }
    }
    polygon.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    polygon.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'points') {
            this.points = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    polygon.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    polygon.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'points:pathLength', attrs);
    }
    return polygon;
})(item);

_md.polygon = polygon;
// element circle
var circle = (function (item) {
    _inherits(circle, item);
    function circle(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(circle.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, circle);
        this.wzElement = "circle";
    }
    circle.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    circle.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.cx)) {
            result["cx"] = this.cx;
        }
        if (!isEmpty(this.cy)) {
            result["cy"] = this.cy;
        }
        if (!isEmpty(this.r)) {
            result["r"] = this.r;
        }
    }
    circle.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    circle.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'r') {
            this.r = child.v; return true;
        }
        if (name === 'cx') {
            this.cx = child.v; return true;
        }
        else if (name === 'cy') {
            this.cy = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    circle.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    circle.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'cx;cy;r', attrs);
    }
    return circle;
})(item);

_md.circle = circle;
// element ellipse
var ellipse = (function (item) {
    _inherits(ellipse, item);
    function ellipse(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ellipse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ellipse);
        this.wzElement = "ellipse";
    }
    ellipse.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ellipse.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.cx)) {
            result["cx"] = this.cx;
        }
        if (!isEmpty(this.cy)) {
            result["cy"] = this.cy;
        }
        if (!isEmpty(this.rx)) {
            result["rx"] = this.rx;
        }
        if (!isEmpty(this.ry)) {
            result["ry"] = this.ry;
        }
    }
    ellipse.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    ellipse.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'cx') {
            this.cx = child.v; return true;
        }
        else if (name === 'cy') {
            this.cy = child.v; return true;
        }
        if (name === 'rx') {
            this.rx = child.v; return true;
        }
        else if (name === 'ry') {
            this.ry = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    ellipse.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    ellipse.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'cx;cy;rx;ry', attrs);
    }
    return ellipse;
})(item);

_md.ellipse = ellipse;
// element path
var path = (function (item) {
    _inherits(path, item);
    function path(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(path.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, path);
        this.wzElement = "path";
    }
    path.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    path.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.d)) {
            result["d"] = this.d;
        }
    }
    path.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    path.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'd') {
            this.d = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    path.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    path.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'd', attrs);
    }
    return path;
})(item);

_md.path = path;
// element text
var text = (function (item) {
    _inherits(text, item);
    function text(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(text.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, text);
        this.wzElement = "text";
    }
    text.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    text.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.x)) {
            result["x"] = this.x;
        }
        if (!isEmpty(this.y)) {
            result["y"] = this.y;
        }
        if (!isEmpty(this.fontFamily)) {
            result["fontFamily"] = this.fontFamily;
        }
        if (!isEmpty(this.fontSize)) {
            result["fontSize"] = this.fontSize;
        }
    }
    text.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    text.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'x') {
            this.x = child.v; return true;
        }
        if (name === 'y') {
            this.y = child.v; return true;
        }
        if (name === 'font-size') {
            this.fontSize = child.v; return true;
        }
        else if (name === 'font_size') {
            this.fontSize = child.v; return true;
        }
        if (name === 'font-family') {
            this.fontFamily = child.v; return true;
        }
        else if (name === 'font_family') {
            this.fontFamily = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    text.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    text.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'x;y;fontFamily;fontSize', attrs);
    }
    return text;
})(item);

_md.text = text;
// element textPath
var textPath = (function (item) {
    _inherits(textPath, item);
    function textPath(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(textPath.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, textPath);
        this.wzElement = "textPath";
    }
    textPath.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    textPath.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    textPath.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return textPath;
})(item);

_md.textPath = textPath;
// element tspan
var tspan = (function (item) {
    _inherits(tspan, item);
    function tspan(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tspan.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tspan);
        this.wzElement = "tspan";
    }
    tspan.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    tspan.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.x)) {
            result["x"] = this.x;
        }
        if (!isEmpty(this.y)) {
            result["y"] = this.y;
        }
        if (!isEmpty(this.dx)) {
            result["dx"] = this.dx;
        }
        if (!isEmpty(this.dy)) {
            result["dy"] = this.dy;
        }
    }
    tspan.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    tspan.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'x') {
            this.x = child.v; return true;
        }
        if (name === 'y') {
            this.y = child.v; return true;
        }
        if (name === 'dx') {
            this.dx = child.v; return true;
        }
        else if (name === 'dy') {
            this.dy = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    tspan.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    tspan.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'x;y;dx;dy', attrs);
    }
    return tspan;
})(item);

_md.tspan = tspan;
/**
    element a
     link
     a
        href http://tecfa.unige.ch
        rect
            fill #00FF00
            stroke #00FF00
            width 300
            height 40
            ry 5
            rx 5
            y 80
            x 50
        text TECFA POWER 1 click away
            x 100
            y 110
            stroke #000099
            fill #000099
            font-size 24
*/
var a = (function (item) {
    _inherits(a, item);
    function a(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(a.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, a);
        this.wzElement = "a";
    }
    a.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    a.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    a.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return a;
})(item);

_md.a = a;
/**
    element g
     grouping
*/
var g = (function (item) {
    _inherits(g, item);
    function g(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(g.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, g);
        this.wzElement = "g";
    }
    g.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    g.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    g.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return g;
})(item);

_md.g = g;
// element image
var image = (function (rect) {
    _inherits(image, rect);
    function image(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(image.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, image);
        this.wzElement = "image";
    }
    image.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    image.prototype.toJsonProperties = function(result) {
        _md.rect.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    image.prototype.toJsonChildren = function(result) {
        _md.rect.prototype.toJsonChildren.call(this, result);
    }
    return image;
})(rect);

_md.image = image;
// element title
var title = (function (item) {
    _inherits(title, item);
    function title(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(title.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, title);
        this.wzElement = "title";
    }
    title.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    title.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    title.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return title;
})(item);

_md.title = title;
// element altGlyph
var altGlyph = (function (item) {
    _inherits(altGlyph, item);
    function altGlyph(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(altGlyph.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, altGlyph);
        this.wzElement = "altGlyph";
    }
    altGlyph.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    altGlyph.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    altGlyph.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return altGlyph;
})(item);

_md.altGlyph = altGlyph;
// element altGlyphDef
var altGlyphDef = (function (item) {
    _inherits(altGlyphDef, item);
    function altGlyphDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(altGlyphDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, altGlyphDef);
        this.wzElement = "altGlyphDef";
    }
    altGlyphDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    altGlyphDef.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    altGlyphDef.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return altGlyphDef;
})(item);

_md.altGlyphDef = altGlyphDef;
// element altGlyphItem
var altGlyphItem = (function (item) {
    _inherits(altGlyphItem, item);
    function altGlyphItem(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(altGlyphItem.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, altGlyphItem);
        this.wzElement = "altGlyphItem";
    }
    altGlyphItem.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    altGlyphItem.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    altGlyphItem.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return altGlyphItem;
})(item);

_md.altGlyphItem = altGlyphItem;
// element animate
var animate = (function (item) {
    _inherits(animate, item);
    function animate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(animate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, animate);
        this.wzElement = "animate";
    }
    animate.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    animate.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    animate.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return animate;
})(item);

_md.animate = animate;
// element animateColor
var animateColor = (function (item) {
    _inherits(animateColor, item);
    function animateColor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(animateColor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, animateColor);
        this.wzElement = "animateColor";
    }
    animateColor.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    animateColor.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    animateColor.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return animateColor;
})(item);

_md.animateColor = animateColor;
// element animateMotion
var animateMotion = (function (item) {
    _inherits(animateMotion, item);
    function animateMotion(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(animateMotion.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, animateMotion);
        this.wzElement = "animateMotion";
    }
    animateMotion.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    animateMotion.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    animateMotion.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return animateMotion;
})(item);

_md.animateMotion = animateMotion;
// element animateTransform
var animateTransform = (function (item) {
    _inherits(animateTransform, item);
    function animateTransform(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(animateTransform.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, animateTransform);
        this.wzElement = "animateTransform";
    }
    animateTransform.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    animateTransform.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    animateTransform.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return animateTransform;
})(item);

_md.animateTransform = animateTransform;
// element clipPath
var clipPath = (function (item) {
    _inherits(clipPath, item);
    function clipPath(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(clipPath.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, clipPath);
        this.wzElement = "clipPath";
    }
    clipPath.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    clipPath.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    clipPath.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return clipPath;
})(item);

_md.clipPath = clipPath;
// element color_profile
var color_profile = (function (item) {
    _inherits(color_profile, item);
    function color_profile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(color_profile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, color_profile);
        this.wzElement = "color_profile";
    }
    color_profile.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    color_profile.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    color_profile.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return color_profile;
})(item);

_md.color_profile = color_profile;
// element cursor
var cursor = (function (item) {
    _inherits(cursor, item);
    function cursor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(cursor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, cursor);
        this.wzElement = "cursor";
    }
    cursor.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    cursor.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    cursor.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return cursor;
})(item);

_md.cursor = cursor;
// element defs
var defs = (function (item) {
    _inherits(defs, item);
    function defs(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(defs.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, defs);
        this.wzElement = "defs";
    }
    defs.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    defs.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    defs.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return defs;
})(item);

_md.defs = defs;
// element desc
var desc = (function (item) {
    _inherits(desc, item);
    function desc(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(desc.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, desc);
        this.wzElement = "desc";
    }
    desc.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    desc.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    desc.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return desc;
})(item);

_md.desc = desc;
// element feBlend
var feBlend = (function (item) {
    _inherits(feBlend, item);
    function feBlend(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feBlend.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feBlend);
        this.wzElement = "feBlend";
    }
    feBlend.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feBlend.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feBlend.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feBlend;
})(item);

_md.feBlend = feBlend;
// element feColorMatrix
var feColorMatrix = (function (item) {
    _inherits(feColorMatrix, item);
    function feColorMatrix(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feColorMatrix.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feColorMatrix);
        this.wzElement = "feColorMatrix";
    }
    feColorMatrix.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feColorMatrix.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feColorMatrix.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feColorMatrix;
})(item);

_md.feColorMatrix = feColorMatrix;
// element feComponentTransfer
var feComponentTransfer = (function (item) {
    _inherits(feComponentTransfer, item);
    function feComponentTransfer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feComponentTransfer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feComponentTransfer);
        this.wzElement = "feComponentTransfer";
    }
    feComponentTransfer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feComponentTransfer.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feComponentTransfer.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feComponentTransfer;
})(item);

_md.feComponentTransfer = feComponentTransfer;
// element feComposite
var feComposite = (function (item) {
    _inherits(feComposite, item);
    function feComposite(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feComposite.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feComposite);
        this.wzElement = "feComposite";
    }
    feComposite.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feComposite.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feComposite.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feComposite;
})(item);

_md.feComposite = feComposite;
// element feConvolveMatrix
var feConvolveMatrix = (function (item) {
    _inherits(feConvolveMatrix, item);
    function feConvolveMatrix(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feConvolveMatrix.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feConvolveMatrix);
        this.wzElement = "feConvolveMatrix";
    }
    feConvolveMatrix.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feConvolveMatrix.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feConvolveMatrix.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feConvolveMatrix;
})(item);

_md.feConvolveMatrix = feConvolveMatrix;
// element feDiffuseLighting
var feDiffuseLighting = (function (item) {
    _inherits(feDiffuseLighting, item);
    function feDiffuseLighting(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feDiffuseLighting.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feDiffuseLighting);
        this.wzElement = "feDiffuseLighting";
    }
    feDiffuseLighting.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feDiffuseLighting.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feDiffuseLighting.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feDiffuseLighting;
})(item);

_md.feDiffuseLighting = feDiffuseLighting;
// element feDisplacementMap
var feDisplacementMap = (function (item) {
    _inherits(feDisplacementMap, item);
    function feDisplacementMap(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feDisplacementMap.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feDisplacementMap);
        this.wzElement = "feDisplacementMap";
    }
    feDisplacementMap.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feDisplacementMap.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feDisplacementMap.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feDisplacementMap;
})(item);

_md.feDisplacementMap = feDisplacementMap;
// element feDistantLight
var feDistantLight = (function (item) {
    _inherits(feDistantLight, item);
    function feDistantLight(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feDistantLight.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feDistantLight);
        this.wzElement = "feDistantLight";
    }
    feDistantLight.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feDistantLight.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feDistantLight.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feDistantLight;
})(item);

_md.feDistantLight = feDistantLight;
// element feFlood
var feFlood = (function (item) {
    _inherits(feFlood, item);
    function feFlood(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feFlood.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feFlood);
        this.wzElement = "feFlood";
    }
    feFlood.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feFlood.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feFlood.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feFlood;
})(item);

_md.feFlood = feFlood;
// element feFuncA
var feFuncA = (function (item) {
    _inherits(feFuncA, item);
    function feFuncA(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feFuncA.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feFuncA);
        this.wzElement = "feFuncA";
    }
    feFuncA.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feFuncA.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feFuncA.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feFuncA;
})(item);

_md.feFuncA = feFuncA;
// element feFuncB
var feFuncB = (function (item) {
    _inherits(feFuncB, item);
    function feFuncB(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feFuncB.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feFuncB);
        this.wzElement = "feFuncB";
    }
    feFuncB.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feFuncB.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feFuncB.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feFuncB;
})(item);

_md.feFuncB = feFuncB;
// element feFuncG
var feFuncG = (function (item) {
    _inherits(feFuncG, item);
    function feFuncG(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feFuncG.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feFuncG);
        this.wzElement = "feFuncG";
    }
    feFuncG.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feFuncG.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feFuncG.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feFuncG;
})(item);

_md.feFuncG = feFuncG;
// element feFuncR
var feFuncR = (function (item) {
    _inherits(feFuncR, item);
    function feFuncR(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feFuncR.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feFuncR);
        this.wzElement = "feFuncR";
    }
    feFuncR.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feFuncR.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feFuncR.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feFuncR;
})(item);

_md.feFuncR = feFuncR;
// element feGaussianBlur
var feGaussianBlur = (function (item) {
    _inherits(feGaussianBlur, item);
    function feGaussianBlur(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feGaussianBlur.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feGaussianBlur);
        this.wzElement = "feGaussianBlur";
    }
    feGaussianBlur.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feGaussianBlur.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feGaussianBlur.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feGaussianBlur;
})(item);

_md.feGaussianBlur = feGaussianBlur;
// element feImage
var feImage = (function (item) {
    _inherits(feImage, item);
    function feImage(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feImage.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feImage);
        this.wzElement = "feImage";
    }
    feImage.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feImage.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feImage.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feImage;
})(item);

_md.feImage = feImage;
// element feMerge
var feMerge = (function (item) {
    _inherits(feMerge, item);
    function feMerge(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feMerge.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feMerge);
        this.wzElement = "feMerge";
    }
    feMerge.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feMerge.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feMerge.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feMerge;
})(item);

_md.feMerge = feMerge;
// element feMergeNode
var feMergeNode = (function (item) {
    _inherits(feMergeNode, item);
    function feMergeNode(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feMergeNode.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feMergeNode);
        this.wzElement = "feMergeNode";
    }
    feMergeNode.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feMergeNode.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feMergeNode.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feMergeNode;
})(item);

_md.feMergeNode = feMergeNode;
// element feMorphology
var feMorphology = (function (item) {
    _inherits(feMorphology, item);
    function feMorphology(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feMorphology.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feMorphology);
        this.wzElement = "feMorphology";
    }
    feMorphology.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feMorphology.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feMorphology.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feMorphology;
})(item);

_md.feMorphology = feMorphology;
// element feOffset
var feOffset = (function (item) {
    _inherits(feOffset, item);
    function feOffset(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feOffset.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feOffset);
        this.wzElement = "feOffset";
    }
    feOffset.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feOffset.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feOffset.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feOffset;
})(item);

_md.feOffset = feOffset;
// element fePointLight
var fePointLight = (function (item) {
    _inherits(fePointLight, item);
    function fePointLight(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fePointLight.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fePointLight);
        this.wzElement = "fePointLight";
    }
    fePointLight.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fePointLight.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fePointLight.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return fePointLight;
})(item);

_md.fePointLight = fePointLight;
// element feSpecularLighting
var feSpecularLighting = (function (item) {
    _inherits(feSpecularLighting, item);
    function feSpecularLighting(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feSpecularLighting.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feSpecularLighting);
        this.wzElement = "feSpecularLighting";
    }
    feSpecularLighting.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feSpecularLighting.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feSpecularLighting.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feSpecularLighting;
})(item);

_md.feSpecularLighting = feSpecularLighting;
// element feSpotLight
var feSpotLight = (function (item) {
    _inherits(feSpotLight, item);
    function feSpotLight(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feSpotLight.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feSpotLight);
        this.wzElement = "feSpotLight";
    }
    feSpotLight.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feSpotLight.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feSpotLight.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feSpotLight;
})(item);

_md.feSpotLight = feSpotLight;
// element feTile
var feTile = (function (item) {
    _inherits(feTile, item);
    function feTile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feTile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feTile);
        this.wzElement = "feTile";
    }
    feTile.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feTile.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feTile.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feTile;
})(item);

_md.feTile = feTile;
// element feTurbulence
var feTurbulence = (function (item) {
    _inherits(feTurbulence, item);
    function feTurbulence(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(feTurbulence.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, feTurbulence);
        this.wzElement = "feTurbulence";
    }
    feTurbulence.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    feTurbulence.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    feTurbulence.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return feTurbulence;
})(item);

_md.feTurbulence = feTurbulence;
// element filter
var filter = (function (item) {
    _inherits(filter, item);
    function filter(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(filter.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, filter);
        this.wzElement = "filter";
    }
    filter.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    filter.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    filter.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return filter;
})(item);

_md.filter = filter;
// element font
var font = (function (item) {
    _inherits(font, item);
    function font(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(font.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, font);
        this.wzElement = "font";
    }
    font.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    font.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    font.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return font;
})(item);

_md.font = font;
// element font_face
var font_face = (function (item) {
    _inherits(font_face, item);
    function font_face(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(font_face.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, font_face);
        this.wzElement = "font_face";
    }
    font_face.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    font_face.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    font_face.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return font_face;
})(item);

_md.font_face = font_face;
// element font_face_format
var font_face_format = (function (item) {
    _inherits(font_face_format, item);
    function font_face_format(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(font_face_format.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, font_face_format);
        this.wzElement = "font_face_format";
    }
    font_face_format.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    font_face_format.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    font_face_format.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return font_face_format;
})(item);

_md.font_face_format = font_face_format;
// element font_face_name
var font_face_name = (function (item) {
    _inherits(font_face_name, item);
    function font_face_name(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(font_face_name.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, font_face_name);
        this.wzElement = "font_face_name";
    }
    font_face_name.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    font_face_name.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    font_face_name.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return font_face_name;
})(item);

_md.font_face_name = font_face_name;
// element font_face_src
var font_face_src = (function (item) {
    _inherits(font_face_src, item);
    function font_face_src(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(font_face_src.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, font_face_src);
        this.wzElement = "font_face_src";
    }
    font_face_src.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    font_face_src.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    font_face_src.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return font_face_src;
})(item);

_md.font_face_src = font_face_src;
// element font_face_uri
var font_face_uri = (function (item) {
    _inherits(font_face_uri, item);
    function font_face_uri(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(font_face_uri.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, font_face_uri);
        this.wzElement = "font_face_uri";
    }
    font_face_uri.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    font_face_uri.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    font_face_uri.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return font_face_uri;
})(item);

_md.font_face_uri = font_face_uri;
// element foreignObject
var foreignObject = (function (item) {
    _inherits(foreignObject, item);
    function foreignObject(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(foreignObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, foreignObject);
        this.wzElement = "foreignObject";
    }
    foreignObject.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    foreignObject.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    foreignObject.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return foreignObject;
})(item);

_md.foreignObject = foreignObject;
// element glyph
var glyph = (function (item) {
    _inherits(glyph, item);
    function glyph(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(glyph.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, glyph);
        this.wzElement = "glyph";
    }
    glyph.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    glyph.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    glyph.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return glyph;
})(item);

_md.glyph = glyph;
// element glyphRef
var glyphRef = (function (item) {
    _inherits(glyphRef, item);
    function glyphRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(glyphRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, glyphRef);
        this.wzElement = "glyphRef";
    }
    glyphRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    glyphRef.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    glyphRef.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return glyphRef;
})(item);

_md.glyphRef = glyphRef;
// element hkern
var hkern = (function (item) {
    _inherits(hkern, item);
    function hkern(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(hkern.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, hkern);
        this.wzElement = "hkern";
    }
    hkern.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    hkern.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    hkern.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return hkern;
})(item);

_md.hkern = hkern;
// element linearGradient
var linearGradient = (function (line) {
    _inherits(linearGradient, line);
    function linearGradient(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(linearGradient.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, linearGradient);
        this.wzElement = "linearGradient";
    }
    linearGradient.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    linearGradient.prototype.toJsonProperties = function(result) {
        _md.line.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.gradientUnits)) {
            result["gradientUnits"] = this.gradientUnits;
        }
    }
    linearGradient.prototype.toJsonChildren = function(result) {
        _md.line.prototype.toJsonChildren.call(this, result);
    }
    linearGradient.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'gradientunits') {
            this.gradientUnits = child.v; return true;
        }
        ok = _md.line.prototype.loadChild.call(this, child);
        return ok;
    }
    linearGradient.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    return linearGradient;
})(line);

_md.linearGradient = linearGradient;
// element marker
var marker = (function (item) {
    _inherits(marker, item);
    function marker(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(marker.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, marker);
        this.wzElement = "marker";
    }
    marker.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    marker.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    marker.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return marker;
})(item);

_md.marker = marker;
// element mask
var mask = (function (item) {
    _inherits(mask, item);
    function mask(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mask.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mask);
        this.wzElement = "mask";
    }
    mask.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mask.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    mask.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return mask;
})(item);

_md.mask = mask;
// element metadata
var metadata = (function (item) {
    _inherits(metadata, item);
    function metadata(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(metadata.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, metadata);
        this.wzElement = "metadata";
    }
    metadata.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    metadata.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    metadata.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return metadata;
})(item);

_md.metadata = metadata;
// element missing_glyph
var missing_glyph = (function (item) {
    _inherits(missing_glyph, item);
    function missing_glyph(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(missing_glyph.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, missing_glyph);
        this.wzElement = "missing_glyph";
    }
    missing_glyph.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    missing_glyph.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    missing_glyph.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return missing_glyph;
})(item);

_md.missing_glyph = missing_glyph;
// element mpath
var mpath = (function (item) {
    _inherits(mpath, item);
    function mpath(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mpath.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mpath);
        this.wzElement = "mpath";
    }
    mpath.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mpath.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    mpath.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return mpath;
})(item);

_md.mpath = mpath;
// element pattern
var pattern = (function (item) {
    _inherits(pattern, item);
    function pattern(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pattern.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pattern);
        this.wzElement = "pattern";
    }
    pattern.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pattern.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.progressLines)) {
            result["progressLines"] = this.progressLines;
        }
        if (!isEmpty(this.width)) {
            result["width"] = this.width;
        }
        if (!isEmpty(this.height)) {
            result["height"] = this.height;
        }
        if (!isEmpty(this.patternUnits)) {
            result["patternUnits"] = this.patternUnits;
        }
        if (!isEmpty(this.patternTransform)) {
            result["patternTransform"] = this.patternTransform;
        }
    }
    pattern.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    pattern.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'width') {
            this.width = child.v; return true;
        }
        if (name === 'height') {
            this.height = child.v; return true;
        }
        if (name === 'patternunits') {
            this.patternUnits = child.v; return true;
        }
        if (name === 'progresslines') {
            this.progressLines = child.v; return true;
        }
        if (name === 'patterntransform') {
            this.patternTransform = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    pattern.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    return pattern;
})(item);

_md.pattern = pattern;
// element radialGradient
var radialGradient = (function (item) {
    _inherits(radialGradient, item);
    function radialGradient(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(radialGradient.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, radialGradient);
        this.wzElement = "radialGradient";
    }
    radialGradient.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    radialGradient.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.cx)) {
            result["cx"] = this.cx;
        }
        if (!isEmpty(this.cy)) {
            result["cy"] = this.cy;
        }
        if (!isEmpty(this.r)) {
            result["r"] = this.r;
        }
        if (!isEmpty(this.gradientUnits)) {
            result["gradientUnits"] = this.gradientUnits;
        }
        if (!isEmpty(this.gradientTransform)) {
            result["gradientTransform"] = this.gradientTransform;
        }
    }
    radialGradient.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    radialGradient.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'r') {
            this.r = child.v; return true;
        }
        if (name === 'cx') {
            this.cx = child.v; return true;
        }
        else if (name === 'cy') {
            this.cy = child.v; return true;
        }
        if (name === 'gradientunits') {
            this.gradientUnits = child.v; return true;
        }
        if (name === 'gradienttransform') {
            this.gradientTransform = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    radialGradient.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    radialGradient.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'cx;cy;r;gradientUnits;gradientTransform', attrs);
    }
    return radialGradient;
})(item);

_md.radialGradient = radialGradient;
// element script
var script = (function (item) {
    _inherits(script, item);
    function script(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(script.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, script);
        this.wzElement = "script";
    }
    script.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    script.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    script.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return script;
})(item);

_md.script = script;
// element set
var set = (function (item) {
    _inherits(set, item);
    function set(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(set.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, set);
        this.wzElement = "set";
    }
    set.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    set.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    set.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return set;
})(item);

_md.set = set;
// element stop
var stop = (function (item) {
    _inherits(stop, item);
    function stop(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stop.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stop);
        this.wzElement = "stop";
    }
    stop.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stop.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.style)) {
            result["style"] = this.style;
        }
        if (!isEmpty(this.offset)) {
            result["offset"] = this.offset;
        }
    }
    stop.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    stop.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'style') {
            this.style = child.v; return true;
        }
        if (name === 'offset') {
            this.offset = child.v; return true;
        }
        ok = _md.item.prototype.loadChild.call(this, child);
        return ok;
    }
    stop.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.svgModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    stop.prototype.getAttributes = function(attrs) {
        attrs = _md.item.prototype.getAttributes.call(this, attrs);
        return extractAttributes(this, 'style;offset', attrs);
    }
    return stop;
})(item);

_md.stop = stop;
// element stroke_width
var stroke_width = (function (item) {
    _inherits(stroke_width, item);
    function stroke_width(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stroke_width.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stroke_width);
        this.wzElement = "stroke_width";
    }
    stroke_width.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stroke_width.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stroke_width.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return stroke_width;
})(item);

_md.stroke_width = stroke_width;
// element style
var style = (function (item) {
    _inherits(style, item);
    function style(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(style.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, style);
        this.wzElement = "style";
    }
    style.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    style.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    style.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return style;
})(item);

_md.style = style;
// element xswitch
var xswitch = (function (item) {
    _inherits(xswitch, item);
    function xswitch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xswitch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xswitch);
        this.wzElement = "xswitch";
    }
    xswitch.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xswitch.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xswitch.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return xswitch;
})(item);

_md.xswitch = xswitch;
// element symbol
var symbol = (function (item) {
    _inherits(symbol, item);
    function symbol(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(symbol.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, symbol);
        this.wzElement = "symbol";
    }
    symbol.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    symbol.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    symbol.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return symbol;
})(item);

_md.symbol = symbol;
// element tref
var tref = (function (item) {
    _inherits(tref, item);
    function tref(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tref.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tref);
        this.wzElement = "tref";
    }
    tref.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    tref.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    tref.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return tref;
})(item);

_md.tref = tref;
// element use
var use = (function (item) {
    _inherits(use, item);
    function use(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(use.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, use);
        this.wzElement = "use";
    }
    use.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    use.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    use.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return use;
})(item);

_md.use = use;
// element view
var view = (function (item) {
    _inherits(view, item);
    function view(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(view.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, view);
        this.wzElement = "view";
    }
    view.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    view.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    view.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return view;
})(item);

_md.view = view;
// element vkern
var vkern = (function (item) {
    _inherits(vkern, item);
    function vkern(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(vkern.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, vkern);
        this.wzElement = "vkern";
    }
    vkern.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    vkern.prototype.toJsonProperties = function(result) {
        _md.item.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    vkern.prototype.toJsonChildren = function(result) {
        _md.item.prototype.toJsonChildren.call(this, result);
    }
    return vkern;
})(item);

_md.vkern = vkern;
_md.__tagElementMapping = { '#': 'comment', '@': 'attribute', 'color-profile': 'color_profile', 'colorprofile': 'color_profile', 'font-face': 'font_face', 'fontface': 'font_face', 'font-face-format': 'font_face_format', 'fontfaceformat': 'font_face_format', 'font-face-name': 'font_face_name', 'fontfacename': 'font_face_name', 'font-face-src': 'font_face_src', 'fontfacesrc': 'font_face_src', 'font-face-uri': 'font_face_uri', 'fontfaceuri': 'font_face_uri', 'missing-glyph': 'missing_glyph', 'missingglyph': 'missing_glyph', 'stroke-width': 'stroke_width', 'strokewidth': 'stroke_width', 'switch': 'xswitch' };
// model/replaceUnknownElement( )
var svgModelException = (function () {
    function svgModelException(message, node, instance) {
        _classCallCheck(this, svgModelException);
        this.node = node;
        this.instance = instance;
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
    }
    svgModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: svgModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return svgModelException;
})();

_md.svgModelException = svgModelException;
var svgContext = (function () {
    function svgContext() {
        _classCallCheck(this, svgContext);
        this.validationErrors = [];
    }
    svgContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    svgContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    return svgContext;
})();

_md.svgContext = svgContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function extractAttributes(item, names_string, attrs) {
    if (!attrs) {
        attrs = [];
    }
    if (verify.isNotEmpty(names_string)) {
        var names = names_string.split(';');
        var i, i_items=names, i_len=names.length, name;
        for (i=0; i<i_len; i++) {
            name = names[i];
            if (typeof(item[name]) !== 'undefined' && item != null) {
                attrs.push({
                    name: name, 
                    value: item[name]
                });
            }
        }
    }
    return attrs;
}

