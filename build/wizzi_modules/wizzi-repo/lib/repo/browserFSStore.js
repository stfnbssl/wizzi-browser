/*
    artifact generator: C:\my\wizzi\stfnbssl\wizzi\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: C:\my\wizzi\stfnbssl\wizzi\packages\wizzi-repo\.wizzi\ittf\lib\repo\browserFSStore.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('wizzi-utils').verify;
var util = require('util');
var BrowserFS = require('browserfs');
var verify = require('wizzi-utils').verify;
var vfile = require('wizzi-utils').vfile;
var errors = require('./errors');
function isBrowserPath(method, documentPath, callback) {
    if (verify.startsWith(documentPath, '/ixdb') || verify.startsWith(documentPath, '/tmp')) {
        return true;
    }
    else {
        callback(error('999', method, {
            parameter: 'documentPath', 
            message: 'Not a BrowserFS documentPath. Should be oneOf /tmp, /ixdb'
        }));
        return false;
    }
}
var BrowserFSStore = (function () {
    function BrowserFSStore() {
        _classCallCheck(this, BrowserFSStore);
        this.storeKind = 'browser';
        this.file = null;
    }
    BrowserFSStore.prototype.init = function(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'init', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'init', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        var that = this;
        vfile(function(err, file) {
            if (err) {
                return callback(err);
            }
            that.file = file;
            return callback(null);
        });
    }
    BrowserFSStore.prototype.close = function() {
        // TODO
    }
    BrowserFSStore.prototype.documentExists = function(documentPath, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'documentExists', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(documentPath) === false) {
            return callback(error(
                'InvalidArgument', 'documentExists', { parameter: 'documentPath', message: 'The documentPath parameter must be a string. Received: ' + documentPath }
            ));
        }
        if (isBrowserPath('documentExists', documentPath, callback)) {
            this.file.isFile(documentPath, function(err, result) {
                if (err) {
                    return callback(error('RepoIOError', 'documentExists', {
                            parameter: 'documentPath', 
                            message: 'Checking existence of document: ' + documentPath
                        }, err));
                }
                return callback(null, result);
            });
        }
    }
    BrowserFSStore.prototype.getModelContent = function(documentPath, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getModelContent', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(documentPath) === false) {
            return callback(error(
                'InvalidArgument', 'getModelContent', { parameter: 'documentPath', message: 'The documentPath parameter must be a string. Received: ' + documentPath }
            ));
        }
        if (isBrowserPath('documentExists', documentPath, callback)) {
            this.file.read(documentPath, function(err, result) {
                if (err) {
                    return callback(error('RepoIOError', 'getModelContent', {
                            parameter: 'documentPath', 
                            message: 'Getting content of document: ' + documentPath
                        }, err));
                }
                // log 'getModelContent.received', result
                return callback(null, result);
            });
        }
    }
    return BrowserFSStore;
})();

module.exports = BrowserFSStore;
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi-repo.browserFSStore.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
