/*
    artifact generator: C:\my\wizzi\stfnbssl\wizzi\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: C:\my\wizzi\stfnbssl\wizzi\packages\wizzi\.wizzi\ittf\lib\globalModel\globalModelInfo.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('wizzi-utils').verify;
var util = require("util");
var assert = require("assert");
var path = require("path");
var async = require("async");
var errors = require('../errors');
var verify = require('wizzi-utils').verify;
var GlobalModelInfo = (function () {
    function GlobalModelInfo(config) {
        _classCallCheck(this, GlobalModelInfo);
        if (verify.isObject(config) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'config', message: 'The config parameter must be an object. Received: ' + config }
            ));
        }
        if (verify.isNullOrUndefined(config.cwd) === false) {
            if (verify.isNotEmpty(config.cwd) === false) {
                throw new Error(error(
                    'InvalidArgument', 'ctor', { parameter: 'config.cwd', message: 'The config.cwd parameter must be a string. Received: ' + config.cwd }
                ));
            }
        }
        if (verify.isNotEmpty(config.src) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'config.src', message: 'The config.src parameter must be a string. Received: ' + config.src }
            ));
        }
        if (verify.isNotEmpty(config.exportName) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'config.exportName', message: 'The config.exportName parameter must be a string. Received: ' + config.exportName }
            ));
        }
        if (verify.isNotEmpty(config.schema) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'config.schema', message: 'The config.schema parameter must be a string. Received: ' + config.schema }
            ));
        }
        this.config = config;
        this.schema = config.schema;
        this.exportName = config.exportName;
    }
    GlobalModelInfo.prototype.initialize = function(productionManager) {
        this.productionManager = productionManager;
    }
    GlobalModelInfo.prototype.srcFullPath = function() {
        return verify.isAbsolutePath(this.config.src) ? this.config.src : path.join(this.config.cwd, this.config.src);
    }
    GlobalModelInfo.prototype.toString = function() {
        return 'globalModelInfo.config: ' + util.inspect(this.config, {depth: 2});
    }
    GlobalModelInfo.isGlobalModelConfig = function(item) {
        return verify.isNotEmpty(item.src) && verify.isNotEmpty(item.exportName);
    }
    return GlobalModelInfo;
})();


module.exports = {
    GlobalModelInfo: GlobalModelInfo
};
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi.globalModel.globalModelInfo.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}
