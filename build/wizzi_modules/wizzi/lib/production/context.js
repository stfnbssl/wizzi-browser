/*
    artifact generator: C:\my\wizzi\stfnbssl\wizzi\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: C:\my\wizzi\stfnbssl\wizzi\packages\wizzi\.wizzi\ittf\lib\production\context.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var path = require('path');
var util = require('util');
var file = require('wizzi-utils').file;
var fail = require('wizzi-utils').fail;
var runnerServer = null;
/**
     { options
     { dumps
     string dumpsBaseFolder
     { mTreeBuildupJsWizziScript
     boolean dump
     string dumpsBaseFolder
*/
var ProductionContext = (function () {
    function ProductionContext(options) {
        _classCallCheck(this, ProductionContext);
        this.dump = false;
        this.dumps = options.dumps || {};
        this.ittfDocuments = {};
        this.ittfEvaluationScripts = {};
        this.mTrees = {};
        this.evaluatedMTrees = {};
        this.globalModels = {};
        this.artifactCollections = {};
        this.wizziModels = {};
        this.artifacts = [];
        if (runnerServer == null) {
            runnerServer = require('../services/runnerServer');
        }
        this.runnerServer = runnerServer.instance;
    }
    ProductionContext.prototype.setAclStat = function(aclstat) {
        this.aclstat = aclstat;
    }
    ProductionContext.prototype.addIttfDocument = function(uri, content) {
        if (this.ittfDocuments[uri]) {
            this.ittfDocuments[uri].cacheCount++;
        }
        else {
            this.ittfDocuments[uri] = {
                uri: uri, 
                content: content, 
                cacheCount: 0
            };
        }
    }
    ProductionContext.prototype.addMTreeBuildUpScript = function(uri, ittfEvalScript) {
        this.ittfEvaluationScripts[uri] = {
            uri: uri, 
            ittfEvalScript: ittfEvalScript
        };
        // log '*=*=*=*= temporary wizzi.production.productionContext. this.dumps : ', this.dumps
        if (this.dumps && this.dumps.mTreeBuildupJsWizziScript && this.dumps.mTreeBuildupJsWizziScript.dump) {
            var dumpsFolder = this.dumps.mTreeBuildupJsWizziScript.dumpsBaseFolder || this.dumps.dumpsBaseFolder;
            file.write(path.join(dumpsFolder, path.basename(uri) + '.js.dump'), ittfEvalScript.toCode());
        }
    }
    ProductionContext.prototype.addMixedMTree = function(uri, mTree) {
        if (this.dumps && this.dumps.mixedMTree && this.dumps.mixedMTree.dump) {
            var dumpsFolder = this.dumps.mixedMTree.dumpsBaseFolder || this.dumps.dumpsBaseFolder;
            file.write(path.join(dumpsFolder, (path.basename(uri) + '.mixed.mTree.dump')), mTree.dump());
        }
    }
    ProductionContext.prototype.addEvaluatedMTree = function(uri, mTree) {
        this.evaluatedMTrees[uri] = mTree.dump(true);
        if (this.dumps && this.dumps.evaluatedMTree && this.dumps.evaluatedMTree.dump) {
            var dumpsFolder = this.dumps.evaluatedMTree.dumpsBaseFolder || this.dumps.dumpsBaseFolder;
            file.write(path.join(dumpsFolder, path.basename(uri) + '.evaluated.mTree.dump'), this.evaluatedMTrees[uri]);
        }
    }
    ProductionContext.prototype.addMTree = function(uri, loadHistory) {
        this.mTrees[uri] = {
            uri: uri, 
            loadHistory: loadHistory
        };
    }
    ProductionContext.prototype.addGlobalModel = function(uri, exportName, model) {
        this.globalModels[exportName] = model;
        this.wizziModels[uri] = {
            uri: uri, 
            exportName: exportName, 
            wizziModel: model
        };
    }
    ProductionContext.prototype.addArtifactCollection = function(artifactInfo, frontMatters) {
        // log 'wizzi.ProductionContext.addArtifactCollection.artifactName', artifactInfo.name
        // log 'wizzi.ProductionContext.addArtifactCollection.frontMatters', frontMatters
        var coll = this.artifactCollections[frontMatters.collection];
        if (!coll) {
            this.artifactCollections[frontMatters.collection] = [...frontMatters.items];
        }
        else {
            this.artifactCollections[frontMatters.collection] = [
                ...coll, 
                ...frontMatters.items
            ];
        }
    }
    ProductionContext.prototype.addWizziModel = function(uri, wizziModel) {
        this.wizziModels[uri] = {
            uri: uri, 
            wizziModel: wizziModel
        };
    }
    ProductionContext.prototype.addArtifact = function(artifact) {
        this.artifacts.push(artifact);
    }
    ProductionContext.prototype.getGlobalModels = function() {
        return this.globalModels;
    }
    ProductionContext.prototype.getArtifactCollections = function() {
        return {
                collection: this.artifactCollections
            };
    }
    ProductionContext.prototype.raiseIttfEvaluationScriptError = function(uri, exception) {
        var script = this.ittfEvaluationScripts[uri];
        if (script && script.ittfEvalScript && exception && exception.lineNumber) {
            var lines = script.ittfEvalScript.getErrorLines(exception).join('\n')
            ;
            exception.message = '\nError evaluating ittf in uri: ' + uri + '\n' + lines + '\n';
        }
        else {
            exception.message = '\nError evaluating ittf in uri: ' + uri + '\n' + exception.message + '\n';
        }
        fail.warn(exception);
        throw exception;
    }
    return ProductionContext;
})();


module.exports = {
    ProductionContext: ProductionContext
};
